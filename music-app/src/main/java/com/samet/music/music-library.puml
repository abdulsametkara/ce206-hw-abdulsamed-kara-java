@startuml
skinparam classAttributeIconSize 0

abstract class BaseEntity {
  - id: String
  - name: String
  + getId(): String
  + getName(): String
  + setName(name: String): void
  + equals(obj: Object): boolean
  + hashCode(): int
}

class Artist {
  - biography: String
  - albums: List<Album>
  + Artist(name: String)
  + getBiography(): String
  + setBiography(bio: String): void
  + addAlbum(album: Album): void
  + removeAlbum(album: Album): void
  + getAlbums(): List<Album>
  + toString(): String
}

class Album {
  - artist: Artist
  - releaseYear: int
  - songs: List<Song>
  - genre: String
  + Album(name: String, artist: Artist, year: int)
  + getArtist(): Artist
  + setArtist(artist: Artist): void
  + getReleaseYear(): int
  + setReleaseYear(year: int): void
  + getGenre(): String
  + setGenre(genre: String): void
  + addSong(song: Song): void
  + removeSong(song: Song): void
  + getSongs(): List<Song>
  + toString(): String
}

class Song {
  - album: Album
  - artist: Artist
  - duration: int
  - genre: String
  + Song(name: String, artist: Artist, duration: int)
  + getAlbum(): Album
  + setAlbum(album: Album): void
  + getArtist(): Artist
  + setArtist(artist: Artist): void
  + getDuration(): int
  + setDuration(duration: int): void
  + getGenre(): String
  + setGenre(genre: String): void
  + getFormattedDuration(): String
  + toString(): String
}

class Playlist {
  - description: String
  - songs: List<Song>
  + Playlist(name: String)
  + getDescription(): String
  + setDescription(desc: String): void
  + addSong(song: Song): void
  + removeSong(song: Song): void
  + getSongs(): List<Song>
  + getSongCount(): int
  + getTotalDuration(): int
  + getFormattedTotalDuration(): String
  + toString(): String
}

interface IMusicCollection {
  + add(item: T): void
  + remove(id: String): boolean
  + getById(id: String): T
  + getAll(): List<T>
  + clear(): void
  + size(): int
}

abstract class MusicCollectionManager {
  - items: Map<String, T>
  + add(item: T): void
  + remove(id: String): boolean
  + getById(id: String): T
  + getAll(): List<T>
  + saveToFile(path: String): boolean
  + loadFromFile(path: String): boolean
}

class MusicCollectionService {
  - artistCollection: ArtistCollection
  - albumCollection: AlbumCollection
  - songCollection: SongCollection
  + addArtist(...): boolean
  + addAlbum(...): boolean
  + addSong(...): boolean
  + searchBy...(): List<T>
}

class MusicRecommendationSystem {
  - userListeningHistory: Map<String, Map<String, Integer>>
  - userGenrePreferences: Map<String, Map<String, Integer>>
  + recordSongPlay(userId: String, songId: String): void
  + recommendSongs(userId: String, limit: int): List<Song>
  + recommendAlbums(userId: String, limit: int): List<Album>
}

class MusicFactory {
  + createArtist(name: String, biography: String): Artist
  + createAlbum(name: String, artist: Artist, year: int, genre: String): Album
  + createSong(name: String, artist: Artist, duration: int, genre: String): Song
}

class ExceptionHandler {
  + handleException(exception: Exception): String
}

class ArtistCollection
class AlbumCollection
class SongCollection
class PlaylistCollection

' İlişkilendirmeler
BaseEntity <|-- Artist
BaseEntity <|-- Album
BaseEntity <|-- Song
BaseEntity <|-- Playlist

Artist "1" *-- "0..*" Album
Album "1" *-- "0..*" Song
Artist "1" *-- "0..*" Song
Playlist "1" *-- "0..*" Song

IMusicCollection <|.. MusicCollectionManager
MusicCollectionManager <|-- ArtistCollection
MusicCollectionManager <|-- AlbumCollection
MusicCollectionManager <|-- SongCollection
MusicCollectionManager <|-- PlaylistCollection

@enduml